2019.01.30_01
1、字符串的格式化
   a="My name is:{name},age is:{age}"
   a.format{name="JarryXia",age=21}
2、填充与对齐的方式，用<,>,^等方式
3、数字格式化
4、可变字符串，一般字符串是不可变的，要用io.StringIO()来改
5、基本运算符
   位操作符，先写成二进制的形式
   a=0
   b11001
   b=0b01000
6、复合赋值运算符

2019.01.30_02
1、序列是数据存储方式，用来存储一系列数据，及存储多个值的连续
   内存空间
2、列表是用来存储任意数目，任意类型的数据集合，大小可变
3、列表元素的增加和删除,一般只在列表尾部添加删除元素，提高效率
   增加：append() 添加单个对象，速度快，建议使用
         +号则涉及很多复制操作，效率低，不推荐使用
		 extend(),用于两个列表相加，合并 insert()，可以将指定对象插入到特定位置。效率较低，大量元素操作时不建议使用
		 乘法扩展
	删除:del a[1],删除列表指定元素
	 pop()方法，删除并返回列表指定元素，如果未指定则默认最后一个
		 remove()删除首次出现的元素
4、列表元素访问和计数
   索引：相当于下标，通过索引来访问
   index()获得指定元素在列表中的下标
   count()获得指定元素在列表中出现的次数
   len()返回列表的元素总个数
   成员资格判断：指定元素是否在列表里面
5、列表切片操作
   列表的遍历操作
   
2019.01.31_01
1、列表排序（修改原列表，不建新列表的排序）
   a.sort() 默认升序
   a.sort(reverse=ture) 默认降序排序
   random.shuffle() 打乱顺序
   用内置函数sorted()进行排序，返回新列表，不对原列表修改
   max(),min()返回最大最小值，sum()求和
2、多维列表，二维列表，列表里面的对象也是列表，注意列表里的元素
   要用“，”符号隔开
3、元组（tuple)属于不可变序列，不能修改里面的元素
   索引访问，切片操作，连接操作，成员关系操作，比较操作，计数
   元组创建：通过()创建
            用tuple()创建
   元组删除:del b
4、元组的访问和计数（与列表类似）
   使用内置函数sorted()函数排序
5、生成器推导式创建元组,生成器只能用一次
   s=(x*2 for x in range(6))
   用s.__next__()方法挨个访问生成的,注意是双下划线
2019.01.31_02
1、字典是键值对的无序可变序列，里面每个对象是键值对，包含键对象
   和值对象，通过键对象来实现值对象的快速更新
2、创建字典对象：使用{}，dict()创建对象
				使用zip()创建对象，k键列表,v为值列表，zip(k,v)
				使用fromkeys创建值为空的列表字典
				dict.fromkeys(['name','age','job'])
3、字典元素的访问：通过键获得相应的值对象，a['name']
				   推荐使用get()方法获得值，a.get('name')
				   列出所有键值对，q.items()
				   a.keys(),a.values()
				   len()键值对个数
				   检测一个键是否在字典里面
4、字典元素的添加，修改，删除：
   a['name']=JarryXia(键存在，则覆盖旧的，不存在，则新加）
	使用update()将新字典添加到旧字典里面，a.update(b),(键存在，
	则覆盖旧的，不存在，则新加
	字典元素的删除，del()删除指定,clear()删除所有,pop()删除指定
	键值对，并返回相应的值对象，popitem()随机删除
5、序列解包
   默认对键解包，name,age=s
   对键值对解包：items(),name,age=s.items()
   对值对象解包：name,age=s.values()
6、表格数据使用字典和列表存储，并实现访问
7、字典核心底层原理
   字典的核心是散列表，散列表是一个稀疏数组（总有空白元素）
   它的每个对象有两个部分，一个键对象的引用，一个是值对象的引用
   键值对存储在数组中的底层原理就是利用哈希表，以及用二进制选择
   特定位置进行存储，他的查找原理类似
8、有时间可以回顾一下C++里面的数据结构与算法
	
   
					

   

   